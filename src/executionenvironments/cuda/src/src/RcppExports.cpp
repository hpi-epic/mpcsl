// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "gpucausalrcpp_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// estimateSkeleton
SepSets estimateSkeleton(Rcpp::NumericMatrix mat, const float alpha, const int maxCondSize, const int NAdelete, const bool verbose);
RcppExport SEXP _gpucausalrcpp_estimateSkeleton(SEXP matSEXP, SEXP alphaSEXP, SEXP maxCondSizeSEXP, SEXP NAdeleteSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const float >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int >::type maxCondSize(maxCondSizeSEXP);
    Rcpp::traits::input_parameter< const int >::type NAdelete(NAdeleteSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateSkeleton(mat, alpha, maxCondSize, NAdelete, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rpmccOwn
Rcpp::NumericMatrix rpmccOwn(const Rcpp::NumericMatrix mat);
RcppExport SEXP _gpucausalrcpp_rpmccOwn(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(rpmccOwn(mat));
    return rcpp_result_gen;
END_RCPP
}
// rpmccOwnShared
Rcpp::NumericMatrix rpmccOwnShared(const Rcpp::NumericMatrix mat);
RcppExport SEXP _gpucausalrcpp_rpmccOwnShared(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(rpmccOwnShared(mat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gpucausalrcpp_estimateSkeleton", (DL_FUNC) &_gpucausalrcpp_estimateSkeleton, 5},
    {"_gpucausalrcpp_rpmccOwn", (DL_FUNC) &_gpucausalrcpp_rpmccOwn, 1},
    {"_gpucausalrcpp_rpmccOwnShared", (DL_FUNC) &_gpucausalrcpp_rpmccOwnShared, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_gpucausalrcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
